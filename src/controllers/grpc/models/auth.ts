// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "auth.proto" (package "users", syntax proto3)
// tslint:disable
import { ServiceType } from '@protobuf-ts/runtime-rpc';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message users.UserEntity
 */
export interface UserEntity {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string;
  /**
   * @generated from protobuf field: string fullName = 2;
   */
  fullName: string;
  /**
   * @generated from protobuf field: string document = 3;
   */
  document: string;
  /**
   * @generated from protobuf field: string email = 4;
   */
  email: string;
  /**
   * @generated from protobuf field: int32 age = 5;
   */
  age: number;
  /**
   * @generated from protobuf field: string password = 6;
   */
  password: string;
}
/**
 * @generated from protobuf message users.UserEntityRequest
 */
export interface UserEntityRequest {
  /**
   * @generated from protobuf field: string fullName = 1;
   */
  fullName: string;
  /**
   * @generated from protobuf field: string document = 2;
   */
  document: string;
  /**
   * @generated from protobuf field: string email = 3;
   */
  email: string;
  /**
   * @generated from protobuf field: int32 age = 4;
   */
  age: number;
  /**
   * @generated from protobuf field: string password = 5;
   */
  password: string;
}
/**
 * @generated from protobuf message users.UserCredentials
 */
export interface UserCredentials {
  /**
   * @generated from protobuf field: string email = 1;
   */
  email: string;
  /**
   * @generated from protobuf field: string password = 2;
   */
  password: string;
}
/**
 * @generated from protobuf message users.AccessToken
 */
export interface AccessToken {
  /**
   * @generated from protobuf field: string access_token = 1;
   */
  accessToken: string;
}
/**
 * @generated from protobuf message users.UserEntityList
 */
export interface UserEntityList {
  /**
   * @generated from protobuf field: repeated users.UserEntity users = 1;
   */
  users: UserEntity[];
}
/**
 * @generated from protobuf message users.Empty
 */
export interface Empty {}
// @generated message type with reflection information, may provide speed optimized methods
class UserEntity$Type extends MessageType<UserEntity> {
  constructor() {
    super('users.UserEntity', [
      { no: 1, name: 'id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'fullName', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'document', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'email', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: 'age', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 6, name: 'password', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<UserEntity>): UserEntity {
    const message = {
      id: '',
      fullName: '',
      document: '',
      email: '',
      age: 0,
      password: '',
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UserEntity>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UserEntity,
  ): UserEntity {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        case /* string fullName */ 2:
          message.fullName = reader.string();
          break;
        case /* string document */ 3:
          message.document = reader.string();
          break;
        case /* string email */ 4:
          message.email = reader.string();
          break;
        case /* int32 age */ 5:
          message.age = reader.int32();
          break;
        case /* string password */ 6:
          message.password = reader.string();
          break;
        default:
          const u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UserEntity,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    /* string fullName = 2; */
    if (message.fullName !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.fullName);
    /* string document = 3; */
    if (message.document !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.document);
    /* string email = 4; */
    if (message.email !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.email);
    /* int32 age = 5; */
    if (message.age !== 0) writer.tag(5, WireType.Varint).int32(message.age);
    /* string password = 6; */
    if (message.password !== '')
      writer.tag(6, WireType.LengthDelimited).string(message.password);
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message users.UserEntity
 */
export const UserEntity = new UserEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserEntityRequest$Type extends MessageType<UserEntityRequest> {
  constructor() {
    super('users.UserEntityRequest', [
      { no: 1, name: 'fullName', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'document', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'email', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'age', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 5, name: 'password', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<UserEntityRequest>): UserEntityRequest {
    const message = {
      fullName: '',
      document: '',
      email: '',
      age: 0,
      password: '',
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UserEntityRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UserEntityRequest,
  ): UserEntityRequest {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string fullName */ 1:
          message.fullName = reader.string();
          break;
        case /* string document */ 2:
          message.document = reader.string();
          break;
        case /* string email */ 3:
          message.email = reader.string();
          break;
        case /* int32 age */ 4:
          message.age = reader.int32();
          break;
        case /* string password */ 5:
          message.password = reader.string();
          break;
        default:
          const u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UserEntityRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string fullName = 1; */
    if (message.fullName !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.fullName);
    /* string document = 2; */
    if (message.document !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.document);
    /* string email = 3; */
    if (message.email !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.email);
    /* int32 age = 4; */
    if (message.age !== 0) writer.tag(4, WireType.Varint).int32(message.age);
    /* string password = 5; */
    if (message.password !== '')
      writer.tag(5, WireType.LengthDelimited).string(message.password);
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message users.UserEntityRequest
 */
export const UserEntityRequest = new UserEntityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserCredentials$Type extends MessageType<UserCredentials> {
  constructor() {
    super('users.UserCredentials', [
      { no: 1, name: 'email', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'password', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<UserCredentials>): UserCredentials {
    const message = { email: '', password: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UserCredentials>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UserCredentials,
  ): UserCredentials {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string email */ 1:
          message.email = reader.string();
          break;
        case /* string password */ 2:
          message.password = reader.string();
          break;
        default:
          const u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UserCredentials,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string email = 1; */
    if (message.email !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.email);
    /* string password = 2; */
    if (message.password !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.password);
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message users.UserCredentials
 */
export const UserCredentials = new UserCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessToken$Type extends MessageType<AccessToken> {
  constructor() {
    super('users.AccessToken', [
      {
        no: 1,
        name: 'access_token',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<AccessToken>): AccessToken {
    const message = { accessToken: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<AccessToken>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: AccessToken,
  ): AccessToken {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string access_token */ 1:
          message.accessToken = reader.string();
          break;
        default:
          const u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: AccessToken,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string access_token = 1; */
    if (message.accessToken !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message users.AccessToken
 */
export const AccessToken = new AccessToken$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserEntityList$Type extends MessageType<UserEntityList> {
  constructor() {
    super('users.UserEntityList', [
      {
        no: 1,
        name: 'users',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => UserEntity,
      },
    ]);
  }
  create(value?: PartialMessage<UserEntityList>): UserEntityList {
    const message = { users: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UserEntityList>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UserEntityList,
  ): UserEntityList {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated users.UserEntity users */ 1:
          message.users.push(
            UserEntity.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          const u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UserEntityList,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated users.UserEntity users = 1; */
    for (let i = 0; i < message.users.length; i++)
      UserEntity.internalBinaryWrite(
        message.users[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message users.UserEntityList
 */
export const UserEntityList = new UserEntityList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
  constructor() {
    super('users.Empty', []);
  }
  create(value?: PartialMessage<Empty>): Empty {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<Empty>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Empty,
  ): Empty {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: Empty,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message users.Empty
 */
export const Empty = new Empty$Type();
/**
 * @generated ServiceType for protobuf service users.UserEntityService
 */
export const UserEntityService = new ServiceType('users.UserEntityService', [
  { name: 'validateUser', options: {}, I: UserCredentials, O: UserEntity },
  { name: 'login', options: {}, I: UserEntity, O: AccessToken },
  { name: 'register', options: {}, I: UserEntityRequest, O: UserEntity },
  { name: 'findAllUsers', options: {}, I: Empty, O: UserEntityList },
]);
